[user]
  signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKE48cIKjCeX0yNkm26MHSrNUPsesXIvyA/o07SHKbnh

[gpg]
  format = ssh

[gpg "ssh"]
  program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"

[commit]
  gpgsign = true

[core]
	excludesfile = /Users/levibostian/.gitignore_global
	autocrlf = false
[push]
	default = simple
[user]
	name = Levi Bostian
	email = levi@levi.earth
[alias]
  # working with stacked PRs
  # Note: requires the tool: https://github.com/ejoffe/spr
  #
  # If you are needing to merge into a branch that is not main, then you need to set that branch name in .spr.yml config file. However, it's easy to forget to update this value if you're quickly switching between branches in a repo. So, I have a command that updates this file before running each spr command to make sure the parent branch is always correct in the config file. 
  update-spr-config = "!true # sd \"githubBranch: .*\" \"githubBranch: $(git parent-main)\" .spr.yml; echo \"Updated spr config to branch: $(git parent-main)\""
  ss = "!git update-spr-config; git spr status" # stack status 
  sc = "!git checkout $(git parent-main); git fetch --prune; git pull;" # stack clean-up 
  sm = "!git update-spr-config; git spr merge; git sd; git sc;" # stack merge. By default, also do all cleanup. Run this command from the branch that you are trying to get merged in. 
  su = "!git update-spr-config; git spr update; sleep 2; git ss;" # stack update. we also check the status after update to check that the CI has begun and no merge conflicts found by github.
  sd = "!BRANCH=$(git branch --show-current); read -p \"OK to delete branch $BRANCH? (ENTER or ctrl+c)\" </dev/tty; git checkout $(git parent-main); git branch -D $BRANCH;" # stack delete branch 

  # aa = add .    
  # cm = commit -m    
  # cne = commit --amend --no-edit

  # Get the parent "main*" branch. Note: this only works if you use "main*" for your parent branch. 
  # By using git log, we are determining the closest "origin/main*" branch to the latest commit. 
  # 
  parent-main = "!git log -n 200 --decorate | grep origin/main | head -n1 | grep -o 'origin/main[^ ,)\t]*' | sd 'origin/(.*)' '$1'"

  # performs a search just like you would in https://github.com/pulls. Then, use json and jq to only print the PR ID. 
  gh-repo-prs-need-reviewed = "!gh pr list --search \"is:open is:pr author:@me archived:false -review:approved draft:false repo:$(gh repo view --json nameWithOwner --jq '.nameWithOwner')\" --json number | jq '.[].number'"
  # Take all PRs that need reviewed and ask the mobile team to do so. 
  gh-ask-for-reviews = "!git gh-repo-prs-need-reviewed | xargs -I {} gh pr edit {} --add-reviewer customerio/mobile"

  s = status
  co = checkout
  cob = checkout -b

  p = "!git push -u origin $(git branch-name)"
  pf = push -f
  ac = "!f() { git add .; echo $1; git commit; }; f"

  b = "!git branch-name"
[pull]
	rebase = false

[init]
	defaultBranch = main
